<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/mvc 
        http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd">

	<!-- 自动扫描com.crm包 -->
	<context:component-scan base-package="com.crm.controller"></context:component-scan>
	<context:component-scan base-package="com.crm.service"></context:component-scan>
	<context:component-scan base-package="com.crm.dao"></context:component-scan>
	<!-- don't handle the static resource 在springMVC-servlet.xml中配置<mvc:default-servlet-handler 
		/>后， 会在Spring MVC上下文中定义一个org.springframework.web.servlet.resource.DefaultServletHttpRequestHandler， 
		它会像一个检查员，对进入DispatcherServlet的URL进行筛查，如果发现是静态资源的请求， 就将该请求转由Web应用服务器默认的Servlet处理，如果不是静态资源的请求，才由DispatcherServlet继续处理。 
		一般Web应用服务器默认的Servlet名称是"default"，因此DefaultServletHttpRequestHandler可以找到它。 
		如果你所有的Web应用服务器的默认Servlet名称不是"default"，则需要通过default-servlet-name属性显示指定：
		 <mvc:default-servlet-handler 
		default-servlet-name="所使用的Web服务器默认使用的Servlet名称" /> -->
	<mvc:default-servlet-handler />

	<!-- if you use annotation you must configure following setting 自动注册RequestMappingHandlerMapping与RequestMappingHandlerAdapter两个Bean, 
		这是Spring MVC为@Controller分发请求所必需的，并且提供了数据绑定支持 -->
	<mvc:annotation-driven>
	<!-- 
        <mvc:message-converters>
            <bean class="com.crm.util.Utf8StringHttpMessageConverter" />
        </mvc:message-converters>
    -->
    </mvc:annotation-driven>
	<mvc:resources mapping="/resource/**" location="/resource/" />

	<!--配置拦截器, 多个拦截器,顺序执行 -->  
	<mvc:interceptors>    
	    <mvc:interceptor>    
	        <!-- 匹配的是url路径， 如果不配置或/**,将拦截所有的Controller -->  
	        <mvc:mapping path="/**" />  
	        <bean class="com.crm.auth.AuthInterceptor"></bean>    
	    </mvc:interceptor>  
	    <!-- 当设置多个拦截器时，先按顺序调用preHandle方法，然后逆序调用每个拦截器的postHandle和afterCompletion方法 -->  
	</mvc:interceptors>  

	<!-- 设置spring mvc的处理的 handlerMapping和handlerAdapter -->
	<bean id="handlerMapping"
		class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping" />
	<bean id="handlerAdapter"
		class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">
			<list>
				<ref bean="jsonHttpMessageConverter" />
			</list>
		</property>
	</bean>

	<!-- json转换，需配置编码格式，否则乱码 -->
	<bean id="jsonHttpMessageConverter"
		class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>text/html;charset=UTF-8</value>
				<value>text/plain;charset=UTF-8</value>  
                <value>application/json;charset=UTF-8</value>  
			</list>
		</property>
	</bean>
	
	<bean id="viewResolver"
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/jsp/" />
		<property name="suffix" value=".jsp" />
		<property name="contentType" value="text/html; charset=utf-8" />
	</bean>
	
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="defaultEncoding" value="UTF-8" />
		<property name="maxUploadSize">  
            <value>104857600</value>  
        </property>
        <property name="maxInMemorySize">  
            <value>4096</value>  
        </property>  
		
	</bean>
</beans>